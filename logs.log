2025-08-19 18:03:39,867:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-19 18:03:39,867:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-19 18:03:39,867:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-19 18:03:39,867:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-19 18:06:08,617:INFO:PyCaret ClassificationExperiment
2025-08-19 18:06:08,617:INFO:Logging name: clf-default-name
2025-08-19 18:06:08,617:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-08-19 18:06:08,617:INFO:version 3.3.2
2025-08-19 18:06:08,617:INFO:Initializing setup()
2025-08-19 18:06:08,617:INFO:self.USI: f510
2025-08-19 18:06:08,617:INFO:self._variable_keys: {'target_param', 'is_multiclass', 'memory', 'y', 'fold_groups_param', 'fold_shuffle_param', 'gpu_n_jobs_param', 'data', 'seed', '_ml_usecase', 'html_param', 'idx', 'n_jobs_param', 'USI', 'X_train', 'gpu_param', '_available_plots', 'y_test', 'log_plots_param', 'y_train', 'X_test', 'fix_imbalance', 'X', 'logging_param', 'fold_generator', 'exp_id', 'exp_name_log', 'pipeline'}
2025-08-19 18:06:08,617:INFO:Checking environment
2025-08-19 18:06:08,617:INFO:python_version: 3.10.12
2025-08-19 18:06:08,617:INFO:python_build: ('main', 'Jul  5 2023 19:01:18')
2025-08-19 18:06:08,617:INFO:machine: AMD64
2025-08-19 18:06:08,617:INFO:platform: Windows-10-10.0.26100-SP0
2025-08-19 18:06:08,617:INFO:Memory: svmem(total=68325134336, available=47643242496, percent=30.3, used=20681891840, free=47643242496)
2025-08-19 18:06:08,617:INFO:Physical Core: 20
2025-08-19 18:06:08,617:INFO:Logical Core: 28
2025-08-19 18:06:08,617:INFO:Checking libraries
2025-08-19 18:06:08,617:INFO:System:
2025-08-19 18:06:08,617:INFO:    python: 3.10.12 | packaged by Anaconda, Inc. | (main, Jul  5 2023, 19:01:18) [MSC v.1916 64 bit (AMD64)]
2025-08-19 18:06:08,617:INFO:executable: c:\Users\user\anaconda3\envs\python310\python.exe
2025-08-19 18:06:08,617:INFO:   machine: Windows-10-10.0.26100-SP0
2025-08-19 18:06:08,617:INFO:PyCaret required dependencies:
2025-08-19 18:06:08,642:INFO:                 pip: 25.2
2025-08-19 18:06:08,642:INFO:          setuptools: 78.1.1
2025-08-19 18:06:08,642:INFO:             pycaret: 3.3.2
2025-08-19 18:06:08,642:INFO:             IPython: 8.37.0
2025-08-19 18:06:08,642:INFO:          ipywidgets: 8.1.7
2025-08-19 18:06:08,642:INFO:                tqdm: 4.67.1
2025-08-19 18:06:08,642:INFO:               numpy: 1.26.4
2025-08-19 18:06:08,642:INFO:              pandas: 2.1.4
2025-08-19 18:06:08,642:INFO:              jinja2: 3.1.6
2025-08-19 18:06:08,642:INFO:               scipy: 1.11.4
2025-08-19 18:06:08,642:INFO:              joblib: 1.3.2
2025-08-19 18:06:08,642:INFO:             sklearn: 1.4.2
2025-08-19 18:06:08,642:INFO:                pyod: 2.0.5
2025-08-19 18:06:08,642:INFO:            imblearn: 0.14.0
2025-08-19 18:06:08,642:INFO:   category_encoders: 2.7.0
2025-08-19 18:06:08,642:INFO:            lightgbm: 4.6.0
2025-08-19 18:06:08,642:INFO:               numba: 0.61.2
2025-08-19 18:06:08,642:INFO:            requests: 2.32.4
2025-08-19 18:06:08,642:INFO:          matplotlib: 3.7.5
2025-08-19 18:06:08,642:INFO:          scikitplot: 0.3.7
2025-08-19 18:06:08,642:INFO:         yellowbrick: 1.5
2025-08-19 18:06:08,642:INFO:              plotly: 5.24.1
2025-08-19 18:06:08,642:INFO:    plotly-resampler: Not installed
2025-08-19 18:06:08,642:INFO:             kaleido: 1.0.0
2025-08-19 18:06:08,642:INFO:           schemdraw: 0.15
2025-08-19 18:06:08,642:INFO:         statsmodels: 0.14.5
2025-08-19 18:06:08,642:INFO:              sktime: 0.26.0
2025-08-19 18:06:08,642:INFO:               tbats: 1.1.3
2025-08-19 18:06:08,642:INFO:            pmdarima: 2.0.4
2025-08-19 18:06:08,642:INFO:              psutil: 7.0.0
2025-08-19 18:06:08,642:INFO:          markupsafe: 3.0.2
2025-08-19 18:06:08,642:INFO:             pickle5: Not installed
2025-08-19 18:06:08,642:INFO:         cloudpickle: 3.1.1
2025-08-19 18:06:08,642:INFO:         deprecation: 2.1.0
2025-08-19 18:06:08,642:INFO:              xxhash: 3.5.0
2025-08-19 18:06:08,642:INFO:           wurlitzer: Not installed
2025-08-19 18:06:08,642:INFO:PyCaret optional dependencies:
2025-08-19 18:06:08,652:INFO:                shap: 0.48.0
2025-08-19 18:06:08,652:INFO:           interpret: Not installed
2025-08-19 18:06:08,652:INFO:                umap: Not installed
2025-08-19 18:06:08,652:INFO:     ydata_profiling: Not installed
2025-08-19 18:06:08,652:INFO:  explainerdashboard: Not installed
2025-08-19 18:06:08,652:INFO:             autoviz: Not installed
2025-08-19 18:06:08,652:INFO:           fairlearn: Not installed
2025-08-19 18:06:08,653:INFO:          deepchecks: Not installed
2025-08-19 18:06:08,653:INFO:             xgboost: Not installed
2025-08-19 18:06:08,653:INFO:            catboost: Not installed
2025-08-19 18:06:08,653:INFO:              kmodes: Not installed
2025-08-19 18:06:08,653:INFO:             mlxtend: Not installed
2025-08-19 18:06:08,653:INFO:       statsforecast: Not installed
2025-08-19 18:06:08,653:INFO:        tune_sklearn: Not installed
2025-08-19 18:06:08,653:INFO:                 ray: Not installed
2025-08-19 18:06:08,653:INFO:            hyperopt: Not installed
2025-08-19 18:06:08,653:INFO:              optuna: Not installed
2025-08-19 18:06:08,653:INFO:               skopt: Not installed
2025-08-19 18:06:08,653:INFO:              mlflow: Not installed
2025-08-19 18:06:08,653:INFO:              gradio: Not installed
2025-08-19 18:06:08,653:INFO:             fastapi: Not installed
2025-08-19 18:06:08,653:INFO:             uvicorn: Not installed
2025-08-19 18:06:08,653:INFO:              m2cgen: Not installed
2025-08-19 18:06:08,653:INFO:           evidently: Not installed
2025-08-19 18:06:08,653:INFO:               fugue: Not installed
2025-08-19 18:06:08,653:INFO:           streamlit: Not installed
2025-08-19 18:06:08,653:INFO:             prophet: Not installed
2025-08-19 18:06:08,653:INFO:None
2025-08-19 18:06:08,653:INFO:Set up data.
2025-08-19 18:06:08,861:INFO:Set up folding strategy.
2025-08-19 18:06:08,861:INFO:Set up train/test split.
2025-08-19 18:06:08,935:INFO:Set up index.
2025-08-19 18:06:08,937:INFO:Assigning column types.
2025-08-19 18:06:08,995:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-08-19 18:06:09,016:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-19 18:06:09,016:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-08-19 18:06:09,035:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 18:06:09,035:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 18:06:09,055:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-19 18:06:09,055:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-08-19 18:06:09,071:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 18:06:09,071:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 18:06:09,071:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-08-19 18:06:09,085:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-08-19 18:06:09,101:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 18:06:09,101:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 18:06:09,130:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-08-19 18:06:09,143:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 18:06:09,143:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 18:06:09,143:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-08-19 18:06:09,170:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 18:06:09,170:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 18:06:09,215:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 18:06:09,215:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 18:06:09,215:INFO:Preparing preprocessing pipeline...
2025-08-19 18:06:09,228:INFO:Set up label encoding.
2025-08-19 18:06:09,228:INFO:Set up simple imputation.
2025-08-19 18:06:09,265:INFO:Set up encoding of ordinal features.
2025-08-19 18:06:09,299:WARNING:The number of classes passed to feature emp_keep2_etc in the ordinal_features parameter (2) don't match with the number of classes in the data (3).
2025-08-19 18:06:09,332:WARNING:The number of classes passed to feature emp_expect2_etc in the ordinal_features parameter (2) don't match with the number of classes in the data (3).
2025-08-19 18:06:09,534:WARNING:The number of classes passed to feature ass_cust2_6_etc in the ordinal_features parameter (2) don't match with the number of classes in the data (3).
2025-08-19 18:06:09,666:INFO:Set up encoding of categorical features.
2025-08-19 18:06:10,009:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:06:23,057:INFO:Finished creating preprocessing pipeline.
2025-08-19 18:06:23,132:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\user\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['area', 'gender', 'age',
                                             'wduration_y', 'earning1',
                                             'earning2_r', 'wtime_r',
                                             'woutside4_1', 'wtime_length5',
                                             '...
                                    transformer=TargetEncoder(cols=['wtime_con2_week',
                                                                    'wtime_night',
                                                                    'wtime_night2_hours',
                                                                    'wtime_week',
                                                                    'wtime_month',
                                                                    'ptime_week',
                                                                    'emp_con_period_r',
                                                                    'wtime_con_r',
                                                                    'hm_02_year',
                                                                    'hm_03_year',
                                                                    'hm_04_year',
                                                                    'hm_05_year'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0)))],
         verbose=False)
2025-08-19 18:06:23,132:INFO:Creating final display dataframe.
2025-08-19 18:06:23,582:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:06:25,732:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:06:29,282:INFO:Setup _display_container:                     Description             Value
0                    Session id              1234
1                        Target         burnout60
2                   Target type        Multiclass
3                Target mapping  1: 0, 2: 1, 3: 2
4           Original data shape      (14956, 450)
5        Transformed data shape     (14956, 1113)
6   Transformed train set shape     (11964, 1113)
7    Transformed test set shape      (2992, 1113)
8              Numeric features               258
9          Categorical features               191
10     Rows with missing values            100.0%
11                   Preprocess              True
12              Imputation type            simple
13           Numeric imputation              mean
14       Categorical imputation              mode
15     Maximum one-hot encoding                25
16              Encoding method              None
17               Fold Generator   StratifiedKFold
18                  Fold Number                10
19                     CPU Jobs                -1
20                      Use GPU             False
21               Log Experiment             False
22              Experiment Name  clf-default-name
23                          USI              f510
2025-08-19 18:06:29,319:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 18:06:29,319:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 18:06:29,365:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 18:06:29,365:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-19 18:06:29,366:INFO:setup() successfully completed in 20.75s...............
2025-08-19 18:08:23,638:INFO:Initializing compare_models()
2025-08-19 18:08:23,638:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026ABA2ABC10>, include=None, fold=10, round=4, cross_validation=True, sort=AUC, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000026ABA2ABC10>, 'include': None, 'exclude': None, 'fold': 10, 'round': 4, 'cross_validation': True, 'sort': 'AUC', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-08-19 18:08:23,638:INFO:Checking exceptions
2025-08-19 18:08:23,678:INFO:Preparing display monitor
2025-08-19 18:08:23,693:INFO:Initializing Logistic Regression
2025-08-19 18:08:23,693:INFO:Total runtime is 0.0 minutes
2025-08-19 18:08:23,695:INFO:SubProcess create_model() called ==================================
2025-08-19 18:08:23,695:INFO:Initializing create_model()
2025-08-19 18:08:23,695:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026ABA2ABC10>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026ABA2AA620>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 18:08:23,695:INFO:Checking exceptions
2025-08-19 18:08:23,695:INFO:Importing libraries
2025-08-19 18:08:23,695:INFO:Copying training dataset
2025-08-19 18:08:23,833:INFO:Defining folds
2025-08-19 18:08:23,833:INFO:Declaring metric variables
2025-08-19 18:08:23,835:INFO:Importing untrained model
2025-08-19 18:08:23,837:INFO:Logistic Regression Imported successfully
2025-08-19 18:08:23,840:INFO:Starting cross validation
2025-08-19 18:08:23,851:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 18:08:25,943:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:08:25,948:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:08:25,968:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:08:25,982:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:08:26,015:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:08:26,066:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:08:26,099:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:08:26,132:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:08:26,165:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:08:26,199:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:09:42,882:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-08-19 18:09:42,882:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-08-19 18:09:42,899:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:09:42,899:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:09:43,013:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-08-19 18:09:43,039:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:09:43,277:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-08-19 18:09:43,296:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:09:43,297:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-08-19 18:09:43,320:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:09:43,484:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-08-19 18:09:43,499:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:09:43,828:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-08-19 18:09:43,858:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:09:43,898:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-08-19 18:09:43,920:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:09:43,936:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-08-19 18:09:43,952:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:09:44,247:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-08-19 18:09:44,275:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:09:44,599:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:09:44,615:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:09:44,615:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:09:44,615:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:09:44,615:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:09:44,753:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:09:44,766:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:09:44,766:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:09:44,766:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:09:44,766:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:09:44,852:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:09:44,852:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:09:44,852:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:09:44,852:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:09:44,852:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:09:45,098:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:09:45,098:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:09:45,098:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:09:45,098:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:09:45,098:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:09:45,098:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:09:45,098:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:09:45,115:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:09:45,115:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:09:45,115:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:09:45,231:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:09:45,232:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:09:45,232:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:09:45,232:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:09:45,232:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:09:45,483:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:09:45,499:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:09:45,500:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:09:45,501:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:09:45,502:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:09:45,532:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:09:45,532:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:09:45,532:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:09:45,532:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:09:45,532:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:09:45,532:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:09:45,549:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:09:45,549:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:09:45,549:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:09:45,549:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:09:45,715:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:09:45,716:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:09:45,716:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:09:45,716:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:09:45,716:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:09:45,732:INFO:Calculating mean and std
2025-08-19 18:09:45,732:INFO:Creating metrics dataframe
2025-08-19 18:09:45,732:INFO:Uploading results into container
2025-08-19 18:09:45,732:INFO:Uploading model into container now
2025-08-19 18:09:45,732:INFO:_master_model_container: 1
2025-08-19 18:09:45,732:INFO:_display_container: 2
2025-08-19 18:09:45,736:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1234, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-08-19 18:09:45,736:INFO:create_model() successfully completed......................................
2025-08-19 18:09:45,799:INFO:SubProcess create_model() end ==================================
2025-08-19 18:09:45,799:INFO:Creating metrics dataframe
2025-08-19 18:09:45,799:INFO:Initializing K Neighbors Classifier
2025-08-19 18:09:45,799:INFO:Total runtime is 1.3684335072835287 minutes
2025-08-19 18:09:45,799:INFO:SubProcess create_model() called ==================================
2025-08-19 18:09:45,799:INFO:Initializing create_model()
2025-08-19 18:09:45,799:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026ABA2ABC10>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026ABA2AA620>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 18:09:45,799:INFO:Checking exceptions
2025-08-19 18:09:45,799:INFO:Importing libraries
2025-08-19 18:09:45,799:INFO:Copying training dataset
2025-08-19 18:09:45,884:INFO:Defining folds
2025-08-19 18:09:45,884:INFO:Declaring metric variables
2025-08-19 18:09:45,886:INFO:Importing untrained model
2025-08-19 18:09:45,888:INFO:K Neighbors Classifier Imported successfully
2025-08-19 18:09:45,892:INFO:Starting cross validation
2025-08-19 18:09:45,908:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 18:09:47,867:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:09:47,885:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:09:47,960:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:09:47,996:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:09:48,040:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:09:48,076:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:09:48,099:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:09:48,149:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:09:48,172:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:09:48,232:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:10:15,866:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:10:15,886:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:10:16,280:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:10:16,316:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:10:16,316:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:10:16,435:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:10:16,449:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:10:16,482:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:10:16,532:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:10:16,815:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:10:20,701:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:20,715:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:20,715:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:21,114:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:21,115:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:21,115:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:21,366:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:21,366:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:21,366:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:21,466:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:21,468:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:21,468:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:21,498:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:21,498:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:21,498:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:21,615:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:21,615:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:21,615:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:21,649:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:21,664:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:21,666:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:21,732:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:21,732:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:21,732:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:21,865:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:21,865:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:21,865:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:21,966:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:21,966:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:21,982:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:21,998:INFO:Calculating mean and std
2025-08-19 18:10:21,998:INFO:Creating metrics dataframe
2025-08-19 18:10:22,000:INFO:Uploading results into container
2025-08-19 18:10:22,000:INFO:Uploading model into container now
2025-08-19 18:10:22,000:INFO:_master_model_container: 2
2025-08-19 18:10:22,000:INFO:_display_container: 2
2025-08-19 18:10:22,000:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-08-19 18:10:22,000:INFO:create_model() successfully completed......................................
2025-08-19 18:10:22,049:INFO:SubProcess create_model() end ==================================
2025-08-19 18:10:22,049:INFO:Creating metrics dataframe
2025-08-19 18:10:22,067:INFO:Initializing Naive Bayes
2025-08-19 18:10:22,067:INFO:Total runtime is 1.9728926102320354 minutes
2025-08-19 18:10:22,069:INFO:SubProcess create_model() called ==================================
2025-08-19 18:10:22,069:INFO:Initializing create_model()
2025-08-19 18:10:22,069:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026ABA2ABC10>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026ABA2AA620>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 18:10:22,069:INFO:Checking exceptions
2025-08-19 18:10:22,070:INFO:Importing libraries
2025-08-19 18:10:22,070:INFO:Copying training dataset
2025-08-19 18:10:22,141:INFO:Defining folds
2025-08-19 18:10:22,141:INFO:Declaring metric variables
2025-08-19 18:10:22,144:INFO:Importing untrained model
2025-08-19 18:10:22,146:INFO:Naive Bayes Imported successfully
2025-08-19 18:10:22,149:INFO:Starting cross validation
2025-08-19 18:10:22,165:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 18:10:22,511:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:10:22,532:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:10:24,364:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:10:24,401:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:10:24,405:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:10:24,479:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:10:24,518:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:10:24,518:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:10:24,597:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:10:24,634:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:10:49,081:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:10:49,130:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:10:51,469:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:51,469:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:51,481:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:51,534:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:51,534:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:51,534:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:52,020:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:10:52,199:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:10:52,202:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:10:52,384:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:10:52,448:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:10:52,501:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:10:52,505:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:10:52,618:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:10:53,569:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:53,569:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:53,569:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:53,850:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:53,854:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:53,854:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:53,932:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:53,932:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:53,932:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:54,000:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:54,000:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:54,000:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:54,099:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:54,099:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:54,115:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:54,146:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:54,149:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:54,149:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:54,232:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:54,232:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:54,232:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:54,323:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:54,323:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:54,323:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:10:54,347:INFO:Calculating mean and std
2025-08-19 18:10:54,347:INFO:Creating metrics dataframe
2025-08-19 18:10:54,347:INFO:Uploading results into container
2025-08-19 18:10:54,347:INFO:Uploading model into container now
2025-08-19 18:10:54,347:INFO:_master_model_container: 3
2025-08-19 18:10:54,347:INFO:_display_container: 2
2025-08-19 18:10:54,347:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-08-19 18:10:54,347:INFO:create_model() successfully completed......................................
2025-08-19 18:10:54,414:INFO:SubProcess create_model() end ==================================
2025-08-19 18:10:54,414:INFO:Creating metrics dataframe
2025-08-19 18:10:54,421:INFO:Initializing Decision Tree Classifier
2025-08-19 18:10:54,421:INFO:Total runtime is 2.5121223568916324 minutes
2025-08-19 18:10:54,422:INFO:SubProcess create_model() called ==================================
2025-08-19 18:10:54,423:INFO:Initializing create_model()
2025-08-19 18:10:54,423:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026ABA2ABC10>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026ABA2AA620>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 18:10:54,423:INFO:Checking exceptions
2025-08-19 18:10:54,423:INFO:Importing libraries
2025-08-19 18:10:54,423:INFO:Copying training dataset
2025-08-19 18:10:54,494:INFO:Defining folds
2025-08-19 18:10:54,494:INFO:Declaring metric variables
2025-08-19 18:10:54,496:INFO:Importing untrained model
2025-08-19 18:10:54,499:INFO:Decision Tree Classifier Imported successfully
2025-08-19 18:10:54,499:INFO:Starting cross validation
2025-08-19 18:10:54,517:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 18:10:54,654:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:10:54,682:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:10:54,716:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:10:54,749:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:10:54,784:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:10:54,816:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:10:54,851:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:10:54,898:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:10:54,941:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:10:54,960:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:11:22,868:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:11:23,050:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:11:23,683:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:11:23,749:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:11:23,865:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:11:23,949:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:11:23,982:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:11:23,982:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:11:24,032:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:11:24,073:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:11:24,465:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:11:24,465:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:11:24,465:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:11:24,556:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:11:24,566:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:11:24,566:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:11:25,431:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:11:25,432:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:11:25,434:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:11:25,532:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:11:25,532:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:11:25,532:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:11:25,632:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:11:25,632:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:11:25,632:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:11:25,693:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:11:25,695:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:11:25,696:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:11:25,717:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:11:25,717:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:11:25,717:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:11:25,732:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:11:25,732:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:11:25,732:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:11:25,748:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:11:25,748:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:11:25,748:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:11:25,799:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:11:25,799:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:11:25,799:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:11:25,832:INFO:Calculating mean and std
2025-08-19 18:11:25,832:INFO:Creating metrics dataframe
2025-08-19 18:11:25,835:INFO:Uploading results into container
2025-08-19 18:11:25,835:INFO:Uploading model into container now
2025-08-19 18:11:25,835:INFO:_master_model_container: 4
2025-08-19 18:11:25,835:INFO:_display_container: 2
2025-08-19 18:11:25,835:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=1234, splitter='best')
2025-08-19 18:11:25,835:INFO:create_model() successfully completed......................................
2025-08-19 18:11:25,900:INFO:SubProcess create_model() end ==================================
2025-08-19 18:11:25,900:INFO:Creating metrics dataframe
2025-08-19 18:11:25,906:INFO:Initializing SVM - Linear Kernel
2025-08-19 18:11:25,906:INFO:Total runtime is 3.036870992183686 minutes
2025-08-19 18:11:25,908:INFO:SubProcess create_model() called ==================================
2025-08-19 18:11:25,908:INFO:Initializing create_model()
2025-08-19 18:11:25,908:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026ABA2ABC10>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026ABA2AA620>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 18:11:25,908:INFO:Checking exceptions
2025-08-19 18:11:25,908:INFO:Importing libraries
2025-08-19 18:11:25,908:INFO:Copying training dataset
2025-08-19 18:11:25,967:INFO:Defining folds
2025-08-19 18:11:25,967:INFO:Declaring metric variables
2025-08-19 18:11:25,983:INFO:Importing untrained model
2025-08-19 18:11:25,985:INFO:SVM - Linear Kernel Imported successfully
2025-08-19 18:11:25,989:INFO:Starting cross validation
2025-08-19 18:11:25,999:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 18:11:26,142:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:11:26,170:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:11:26,201:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:11:26,232:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:11:26,275:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:11:26,299:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:11:26,332:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:11:26,385:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:11:26,499:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:11:26,515:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:11:56,549:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:11:57,982:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:11:58,285:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:11:58,444:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:11:58,734:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:11:58,749:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:11:58,834:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:11:58,834:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:11:58,834:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:11:58,834:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:11:58,834:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:11:58,950:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:11:58,965:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:11:59,234:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:11:59,238:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:11:59,716:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:11:59,716:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:11:59,716:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:11:59,716:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:11:59,716:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:11:59,999:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:11:59,999:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:11:59,999:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:11:59,999:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:11:59,999:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:00,082:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:12:00,082:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:00,082:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:00,082:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:12:00,082:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:00,401:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:12:00,402:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:00,403:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:12:00,404:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:00,405:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:00,405:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:12:00,406:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:00,407:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:00,408:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:12:00,409:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:00,565:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:12:00,565:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:00,567:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:00,567:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:12:00,567:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:00,598:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:12:00,598:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:00,598:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:00,598:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:12:00,598:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:00,699:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:12:00,714:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:00,715:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:00,715:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:12:00,715:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:00,715:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:12:00,715:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:00,715:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:00,715:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:12:00,715:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:00,731:INFO:Calculating mean and std
2025-08-19 18:12:00,731:INFO:Creating metrics dataframe
2025-08-19 18:12:00,732:INFO:Uploading results into container
2025-08-19 18:12:00,732:INFO:Uploading model into container now
2025-08-19 18:12:00,732:INFO:_master_model_container: 5
2025-08-19 18:12:00,732:INFO:_display_container: 2
2025-08-19 18:12:00,735:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=1234, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-08-19 18:12:00,735:INFO:create_model() successfully completed......................................
2025-08-19 18:12:00,799:INFO:SubProcess create_model() end ==================================
2025-08-19 18:12:00,799:INFO:Creating metrics dataframe
2025-08-19 18:12:00,799:INFO:Initializing Ridge Classifier
2025-08-19 18:12:00,799:INFO:Total runtime is 3.618423700332642 minutes
2025-08-19 18:12:00,799:INFO:SubProcess create_model() called ==================================
2025-08-19 18:12:00,799:INFO:Initializing create_model()
2025-08-19 18:12:00,799:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026ABA2ABC10>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026ABA2AA620>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 18:12:00,799:INFO:Checking exceptions
2025-08-19 18:12:00,799:INFO:Importing libraries
2025-08-19 18:12:00,799:INFO:Copying training dataset
2025-08-19 18:12:00,873:INFO:Defining folds
2025-08-19 18:12:00,873:INFO:Declaring metric variables
2025-08-19 18:12:00,875:INFO:Importing untrained model
2025-08-19 18:12:00,877:INFO:Ridge Classifier Imported successfully
2025-08-19 18:12:00,881:INFO:Starting cross validation
2025-08-19 18:12:00,895:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 18:12:01,017:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:12:01,059:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:12:01,083:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:12:01,116:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:12:01,149:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:12:01,187:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:12:01,217:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:12:01,280:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:12:01,374:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:12:01,434:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:12:29,812:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=1.94094e-17): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2025-08-19 18:12:29,822:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=1.94334e-17): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2025-08-19 18:12:29,846:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:12:29,851:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:12:29,851:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=1.91123e-17): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2025-08-19 18:12:29,885:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:12:29,912:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=1.93862e-17): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2025-08-19 18:12:29,947:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:12:30,015:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=1.8569e-17): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2025-08-19 18:12:30,044:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:12:30,165:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=1.83917e-17): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2025-08-19 18:12:30,184:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:12:30,242:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=1.92374e-17): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2025-08-19 18:12:30,271:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:12:30,279:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=1.90324e-17): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2025-08-19 18:12:30,301:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=7.08293e-18): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2025-08-19 18:12:30,301:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:12:30,331:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:12:30,389:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=1.93339e-17): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2025-08-19 18:12:30,425:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:12:31,616:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:12:31,616:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:31,616:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:31,616:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:12:31,616:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:31,744:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:12:31,748:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:31,749:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:31,749:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:12:31,749:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:31,773:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:12:31,773:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:31,773:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:31,782:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:12:31,782:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:31,815:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:12:31,817:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:31,819:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:31,819:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:31,901:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:12:31,901:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:31,901:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:31,915:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:32,030:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:12:32,032:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:32,032:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:32,034:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:12:32,034:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:32,063:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:12:32,063:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:32,063:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:32,063:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:32,082:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:12:32,082:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:32,082:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:32,082:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:12:32,082:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:32,148:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:12:32,148:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:32,148:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:32,148:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:32,199:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:12:32,199:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:32,199:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:32,199:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:12:32,216:INFO:Calculating mean and std
2025-08-19 18:12:32,216:INFO:Creating metrics dataframe
2025-08-19 18:12:32,217:INFO:Uploading results into container
2025-08-19 18:12:32,217:INFO:Uploading model into container now
2025-08-19 18:12:32,217:INFO:_master_model_container: 6
2025-08-19 18:12:32,217:INFO:_display_container: 2
2025-08-19 18:12:32,217:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=1234, solver='auto',
                tol=0.0001)
2025-08-19 18:12:32,217:INFO:create_model() successfully completed......................................
2025-08-19 18:12:32,266:INFO:SubProcess create_model() end ==================================
2025-08-19 18:12:32,266:INFO:Creating metrics dataframe
2025-08-19 18:12:32,282:INFO:Initializing Random Forest Classifier
2025-08-19 18:12:32,282:INFO:Total runtime is 4.143143765131633 minutes
2025-08-19 18:12:32,282:INFO:SubProcess create_model() called ==================================
2025-08-19 18:12:32,282:INFO:Initializing create_model()
2025-08-19 18:12:32,282:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026ABA2ABC10>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026ABA2AA620>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 18:12:32,282:INFO:Checking exceptions
2025-08-19 18:12:32,282:INFO:Importing libraries
2025-08-19 18:12:32,282:INFO:Copying training dataset
2025-08-19 18:12:32,350:INFO:Defining folds
2025-08-19 18:12:32,350:INFO:Declaring metric variables
2025-08-19 18:12:32,350:INFO:Importing untrained model
2025-08-19 18:12:32,350:INFO:Random Forest Classifier Imported successfully
2025-08-19 18:12:32,366:INFO:Starting cross validation
2025-08-19 18:12:32,381:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 18:12:32,564:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:12:32,582:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:12:32,631:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:12:32,666:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:12:32,729:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:12:32,766:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:12:32,807:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:12:32,884:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:12:32,951:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:12:32,968:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:13:01,627:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:13:02,416:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:13:02,484:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:13:02,485:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:13:02,486:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:13:02,517:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:13:03,120:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:13:03,132:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:13:03,184:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:13:03,469:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:13:04,938:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:04,942:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:04,942:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:05,039:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:05,039:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:05,042:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:05,067:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:05,074:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:05,074:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:05,091:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:05,095:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:05,097:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:05,115:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:05,115:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:05,115:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:05,115:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:05,115:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:05,253:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:05,253:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:05,254:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:05,255:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:05,255:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:05,256:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:05,256:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:05,257:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:05,260:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:05,383:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:05,383:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:05,383:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:05,398:INFO:Calculating mean and std
2025-08-19 18:13:05,399:INFO:Creating metrics dataframe
2025-08-19 18:13:05,399:INFO:Uploading results into container
2025-08-19 18:13:05,399:INFO:Uploading model into container now
2025-08-19 18:13:05,399:INFO:_master_model_container: 7
2025-08-19 18:13:05,399:INFO:_display_container: 2
2025-08-19 18:13:05,402:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=1234, verbose=0,
                       warm_start=False)
2025-08-19 18:13:05,402:INFO:create_model() successfully completed......................................
2025-08-19 18:13:05,449:INFO:SubProcess create_model() end ==================================
2025-08-19 18:13:05,449:INFO:Creating metrics dataframe
2025-08-19 18:13:05,466:INFO:Initializing Quadratic Discriminant Analysis
2025-08-19 18:13:05,466:INFO:Total runtime is 4.696208016077678 minutes
2025-08-19 18:13:05,466:INFO:SubProcess create_model() called ==================================
2025-08-19 18:13:05,466:INFO:Initializing create_model()
2025-08-19 18:13:05,466:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026ABA2ABC10>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026ABA2AA620>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 18:13:05,466:INFO:Checking exceptions
2025-08-19 18:13:05,466:INFO:Importing libraries
2025-08-19 18:13:05,466:INFO:Copying training dataset
2025-08-19 18:13:05,538:INFO:Defining folds
2025-08-19 18:13:05,538:INFO:Declaring metric variables
2025-08-19 18:13:05,541:INFO:Importing untrained model
2025-08-19 18:13:05,542:INFO:Quadratic Discriminant Analysis Imported successfully
2025-08-19 18:13:05,542:INFO:Starting cross validation
2025-08-19 18:13:05,549:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 18:13:05,748:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:13:05,778:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:13:05,811:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:13:05,853:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:13:05,890:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:13:05,932:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:13:05,994:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:13:06,016:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:13:06,049:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:13:06,134:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:13:39,409:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-19 18:13:39,706:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-19 18:13:39,726:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-19 18:13:39,883:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-19 18:13:39,906:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-19 18:13:39,936:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-19 18:13:39,982:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-19 18:13:40,001:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-19 18:13:40,011:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-19 18:13:40,103:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-19 18:13:40,733:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:13:41,096:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:13:41,255:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:13:41,558:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:13:41,602:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:13:41,614:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:13:41,628:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:13:41,755:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:13:41,883:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:13:41,887:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:13:43,461:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:13:43,463:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:43,467:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:43,469:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:43,818:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:13:43,818:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:43,818:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:43,818:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:43,942:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:13:43,944:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:43,944:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:43,946:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:44,255:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:13:44,256:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:44,258:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:44,260:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:44,302:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:13:44,302:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:44,315:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:44,316:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:44,326:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:13:44,327:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:44,328:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:44,330:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:44,365:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:13:44,365:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:44,365:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:13:44,365:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:44,365:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:44,365:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:44,365:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:44,381:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:44,413:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:13:44,414:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:44,416:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:44,418:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:44,454:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:13:44,455:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:44,455:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:44,458:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:13:44,472:INFO:Calculating mean and std
2025-08-19 18:13:44,472:INFO:Creating metrics dataframe
2025-08-19 18:13:44,474:INFO:Uploading results into container
2025-08-19 18:13:44,475:INFO:Uploading model into container now
2025-08-19 18:13:44,475:INFO:_master_model_container: 8
2025-08-19 18:13:44,475:INFO:_display_container: 2
2025-08-19 18:13:44,475:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-08-19 18:13:44,476:INFO:create_model() successfully completed......................................
2025-08-19 18:13:44,538:INFO:SubProcess create_model() end ==================================
2025-08-19 18:13:44,538:INFO:Creating metrics dataframe
2025-08-19 18:13:44,544:INFO:Initializing Ada Boost Classifier
2025-08-19 18:13:44,544:INFO:Total runtime is 5.347511084874472 minutes
2025-08-19 18:13:44,546:INFO:SubProcess create_model() called ==================================
2025-08-19 18:13:44,546:INFO:Initializing create_model()
2025-08-19 18:13:44,546:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026ABA2ABC10>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026ABA2AA620>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 18:13:44,546:INFO:Checking exceptions
2025-08-19 18:13:44,546:INFO:Importing libraries
2025-08-19 18:13:44,546:INFO:Copying training dataset
2025-08-19 18:13:44,618:INFO:Defining folds
2025-08-19 18:13:44,618:INFO:Declaring metric variables
2025-08-19 18:13:44,621:INFO:Importing untrained model
2025-08-19 18:13:44,623:INFO:Ada Boost Classifier Imported successfully
2025-08-19 18:13:44,627:INFO:Starting cross validation
2025-08-19 18:13:44,633:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 18:13:44,814:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:13:44,849:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:13:44,898:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:13:44,942:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:13:44,982:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:13:44,984:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:13:45,009:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:13:45,050:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:13:45,123:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:13:45,179:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:14:11,954:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-19 18:14:12,300:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-19 18:14:12,391:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-19 18:14:12,548:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-19 18:14:12,599:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-19 18:14:12,631:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-19 18:14:12,665:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-19 18:14:12,682:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-19 18:14:12,785:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-19 18:14:12,915:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-19 18:14:18,735:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:14:18,763:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:14:18,998:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:14:18,999:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:14:19,152:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:14:19,182:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:14:19,216:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:14:19,332:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:14:19,498:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:14:19,665:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:14:20,982:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:14:20,982:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:14:20,982:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:14:20,999:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:14:20,999:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:14:20,999:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:14:20,999:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:14:21,015:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:14:21,199:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:14:21,199:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:14:21,199:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:14:21,199:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:14:21,288:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:14:21,290:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:14:21,291:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:14:21,293:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:14:21,417:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:14:21,418:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:14:21,420:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:14:21,422:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:14:21,462:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:14:21,463:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:14:21,465:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:14:21,467:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:14:21,478:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:14:21,479:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:14:21,481:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:14:21,483:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:14:21,500:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:14:21,500:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:14:21,516:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:14:21,518:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:14:21,549:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:14:21,549:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:14:21,549:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:14:21,565:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:14:21,649:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:14:21,649:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:14:21,649:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:14:21,649:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:14:21,665:INFO:Calculating mean and std
2025-08-19 18:14:21,665:INFO:Creating metrics dataframe
2025-08-19 18:14:21,668:INFO:Uploading results into container
2025-08-19 18:14:21,668:INFO:Uploading model into container now
2025-08-19 18:14:21,668:INFO:_master_model_container: 9
2025-08-19 18:14:21,668:INFO:_display_container: 2
2025-08-19 18:14:21,668:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=1234)
2025-08-19 18:14:21,668:INFO:create_model() successfully completed......................................
2025-08-19 18:14:21,716:INFO:SubProcess create_model() end ==================================
2025-08-19 18:14:21,716:INFO:Creating metrics dataframe
2025-08-19 18:14:21,733:INFO:Initializing Gradient Boosting Classifier
2025-08-19 18:14:21,733:INFO:Total runtime is 5.967325814565023 minutes
2025-08-19 18:14:21,733:INFO:SubProcess create_model() called ==================================
2025-08-19 18:14:21,733:INFO:Initializing create_model()
2025-08-19 18:14:21,733:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026ABA2ABC10>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026ABA2AA620>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 18:14:21,733:INFO:Checking exceptions
2025-08-19 18:14:21,733:INFO:Importing libraries
2025-08-19 18:14:21,733:INFO:Copying training dataset
2025-08-19 18:14:21,807:INFO:Defining folds
2025-08-19 18:14:21,808:INFO:Declaring metric variables
2025-08-19 18:14:21,810:INFO:Importing untrained model
2025-08-19 18:14:21,812:INFO:Gradient Boosting Classifier Imported successfully
2025-08-19 18:14:21,815:INFO:Starting cross validation
2025-08-19 18:14:21,816:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 18:14:22,001:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:14:22,034:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:14:22,061:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:14:22,098:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:14:22,132:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:14:22,153:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:14:22,228:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:14:22,255:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:14:22,275:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:14:22,292:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:15:40,994:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:15:41,015:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:15:41,166:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:15:41,257:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:15:41,257:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:15:41,305:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:15:41,372:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:15:41,532:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:15:41,657:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:15:42,035:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:15:42,592:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:15:42,594:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:15:42,596:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:15:42,599:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:15:42,696:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:15:42,698:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:15:42,700:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:15:42,702:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:15:42,882:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:15:42,884:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:15:42,886:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:15:42,888:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:15:42,999:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:15:42,999:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:15:43,001:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:15:43,003:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:15:43,043:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:15:43,045:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:15:43,047:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:15:43,048:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:15:43,072:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:15:43,074:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:15:43,076:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:15:43,078:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:15:43,134:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:15:43,136:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:15:43,138:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:15:43,138:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:15:43,199:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:15:43,199:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:15:43,201:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:15:43,201:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:15:43,299:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:15:43,299:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:15:43,305:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:15:43,307:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:15:43,488:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:15:43,490:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:15:43,490:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:15:43,492:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:15:43,498:INFO:Calculating mean and std
2025-08-19 18:15:43,499:INFO:Creating metrics dataframe
2025-08-19 18:15:43,501:INFO:Uploading results into container
2025-08-19 18:15:43,502:INFO:Uploading model into container now
2025-08-19 18:15:43,502:INFO:_master_model_container: 10
2025-08-19 18:15:43,502:INFO:_display_container: 2
2025-08-19 18:15:43,502:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=1234, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-08-19 18:15:43,502:INFO:create_model() successfully completed......................................
2025-08-19 18:15:43,566:INFO:SubProcess create_model() end ==================================
2025-08-19 18:15:43,566:INFO:Creating metrics dataframe
2025-08-19 18:15:43,566:INFO:Initializing Linear Discriminant Analysis
2025-08-19 18:15:43,566:INFO:Total runtime is 7.331214932600657 minutes
2025-08-19 18:15:43,582:INFO:SubProcess create_model() called ==================================
2025-08-19 18:15:43,582:INFO:Initializing create_model()
2025-08-19 18:15:43,582:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026ABA2ABC10>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026ABA2AA620>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 18:15:43,582:INFO:Checking exceptions
2025-08-19 18:15:43,582:INFO:Importing libraries
2025-08-19 18:15:43,582:INFO:Copying training dataset
2025-08-19 18:15:43,654:INFO:Defining folds
2025-08-19 18:15:43,654:INFO:Declaring metric variables
2025-08-19 18:15:43,656:INFO:Importing untrained model
2025-08-19 18:15:43,656:INFO:Linear Discriminant Analysis Imported successfully
2025-08-19 18:15:43,663:INFO:Starting cross validation
2025-08-19 18:15:43,676:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 18:15:43,814:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:15:43,899:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:15:43,941:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:15:43,943:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:15:43,982:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:15:43,999:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:15:44,022:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:15:44,151:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:15:44,155:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:15:44,193:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:16:17,332:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:16:17,478:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:16:17,571:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:16:17,716:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:16:17,734:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:16:17,826:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:16:17,999:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:16:18,007:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:16:18,053:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:16:18,098:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:16:18,970:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:16:18,970:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:18,974:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:18,976:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:19,182:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:16:19,184:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:19,185:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:19,188:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:19,315:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:16:19,315:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:19,318:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:19,320:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:19,470:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:16:19,472:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:19,474:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:19,474:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:16:19,476:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:19,476:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:19,478:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:19,480:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:19,567:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:16:19,569:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:19,571:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:19,573:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:19,699:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:16:19,699:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:19,705:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:19,707:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:19,717:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:16:19,717:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:19,717:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:19,717:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:19,732:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:16:19,732:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:19,732:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:19,732:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:19,766:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-08-19 18:16:19,766:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:19,766:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:19,766:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:19,780:INFO:Calculating mean and std
2025-08-19 18:16:19,780:INFO:Creating metrics dataframe
2025-08-19 18:16:19,782:INFO:Uploading results into container
2025-08-19 18:16:19,782:INFO:Uploading model into container now
2025-08-19 18:16:19,782:INFO:_master_model_container: 11
2025-08-19 18:16:19,782:INFO:_display_container: 2
2025-08-19 18:16:19,782:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-08-19 18:16:19,782:INFO:create_model() successfully completed......................................
2025-08-19 18:16:19,849:INFO:SubProcess create_model() end ==================================
2025-08-19 18:16:19,849:INFO:Creating metrics dataframe
2025-08-19 18:16:19,849:INFO:Initializing Extra Trees Classifier
2025-08-19 18:16:19,849:INFO:Total runtime is 7.935923683643341 minutes
2025-08-19 18:16:19,849:INFO:SubProcess create_model() called ==================================
2025-08-19 18:16:19,849:INFO:Initializing create_model()
2025-08-19 18:16:19,849:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026ABA2ABC10>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026ABA2AA620>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 18:16:19,849:INFO:Checking exceptions
2025-08-19 18:16:19,849:INFO:Importing libraries
2025-08-19 18:16:19,849:INFO:Copying training dataset
2025-08-19 18:16:19,917:INFO:Defining folds
2025-08-19 18:16:19,917:INFO:Declaring metric variables
2025-08-19 18:16:19,933:INFO:Importing untrained model
2025-08-19 18:16:19,934:INFO:Extra Trees Classifier Imported successfully
2025-08-19 18:16:19,934:INFO:Starting cross validation
2025-08-19 18:16:19,949:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 18:16:20,138:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:16:20,178:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:16:20,222:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:16:20,224:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:16:20,253:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:16:20,264:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:16:20,301:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:16:20,370:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:16:20,424:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:16:20,449:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:16:47,296:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:16:47,740:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:16:48,284:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:16:49,069:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:16:49,082:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:16:49,315:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:16:50,420:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:16:50,434:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:16:50,436:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:16:50,449:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:16:51,622:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:51,624:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:51,626:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:51,838:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:51,840:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:51,842:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:52,019:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:52,023:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:52,023:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:52,153:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:52,155:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:52,157:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:52,171:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:52,173:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:52,175:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:52,202:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:52,204:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:52,206:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:52,265:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:52,265:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:52,265:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:52,286:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:52,288:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:52,288:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:52,315:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:52,315:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:52,315:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:52,332:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:52,336:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:52,338:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:16:52,348:INFO:Calculating mean and std
2025-08-19 18:16:52,348:INFO:Creating metrics dataframe
2025-08-19 18:16:52,348:INFO:Uploading results into container
2025-08-19 18:16:52,351:INFO:Uploading model into container now
2025-08-19 18:16:52,351:INFO:_master_model_container: 12
2025-08-19 18:16:52,351:INFO:_display_container: 2
2025-08-19 18:16:52,351:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=1234, verbose=0,
                     warm_start=False)
2025-08-19 18:16:52,351:INFO:create_model() successfully completed......................................
2025-08-19 18:16:52,404:INFO:SubProcess create_model() end ==================================
2025-08-19 18:16:52,415:INFO:Creating metrics dataframe
2025-08-19 18:16:52,419:INFO:Initializing Light Gradient Boosting Machine
2025-08-19 18:16:52,419:INFO:Total runtime is 8.478769075870513 minutes
2025-08-19 18:16:52,419:INFO:SubProcess create_model() called ==================================
2025-08-19 18:16:52,419:INFO:Initializing create_model()
2025-08-19 18:16:52,419:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026ABA2ABC10>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026ABA2AA620>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 18:16:52,419:INFO:Checking exceptions
2025-08-19 18:16:52,419:INFO:Importing libraries
2025-08-19 18:16:52,419:INFO:Copying training dataset
2025-08-19 18:16:52,484:INFO:Defining folds
2025-08-19 18:16:52,484:INFO:Declaring metric variables
2025-08-19 18:16:52,484:INFO:Importing untrained model
2025-08-19 18:16:52,498:INFO:Light Gradient Boosting Machine Imported successfully
2025-08-19 18:16:52,501:INFO:Starting cross validation
2025-08-19 18:16:52,518:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 18:16:52,705:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:16:52,717:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:16:52,743:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:16:52,750:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:16:52,842:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:16:52,878:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:16:52,939:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:16:52,939:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:16:52,957:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:16:52,966:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:17:20,797:WARNING:create_model() for lightgbm raised an exception or returned all 0.0, trying without fit_kwargs:
2025-08-19 18:17:20,799:WARNING:Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 794, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\model_selection\_validation.py", line 450, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\model_selection\_validation.py", line 536, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 10 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
10 fits failed with the following error:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\pipeline.py", line 278, in fit
    fitted_estimator = self._memory_fit(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\joblib\memory.py", line 353, in __call__
    return self.func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\lightgbm\sklearn.py", line 1560, in fit
    super().fit(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\lightgbm\sklearn.py", line 1049, in fit
    self._Booster = train(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\lightgbm\engine.py", line 297, in train
    booster = Booster(params=params, train_set=train_set)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\lightgbm\basic.py", line 3656, in __init__
    train_set.construct()
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\lightgbm\basic.py", line 2590, in construct
    self._lazy_init(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\lightgbm\basic.py", line 2227, in _lazy_init
    return self.set_feature_name(feature_name)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\lightgbm\basic.py", line 3046, in set_feature_name
    _safe_call(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\lightgbm\basic.py", line 313, in _safe_call
    raise LightGBMError(_LIB.LGBM_GetLastError().decode("utf-8"))
lightgbm.basic.LightGBMError: Do not support special JSON characters in feature name.


2025-08-19 18:17:20,799:INFO:Initializing create_model()
2025-08-19 18:17:20,799:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026ABA2ABC10>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026ABA2AA620>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 18:17:20,799:INFO:Checking exceptions
2025-08-19 18:17:20,799:INFO:Importing libraries
2025-08-19 18:17:20,799:INFO:Copying training dataset
2025-08-19 18:17:20,898:INFO:Defining folds
2025-08-19 18:17:20,898:INFO:Declaring metric variables
2025-08-19 18:17:20,909:INFO:Importing untrained model
2025-08-19 18:17:20,909:INFO:Light Gradient Boosting Machine Imported successfully
2025-08-19 18:17:20,916:INFO:Starting cross validation
2025-08-19 18:17:20,934:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 18:17:21,067:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:17:21,083:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:17:21,115:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:17:21,147:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:17:21,184:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:17:21,231:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:17:21,247:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:17:21,299:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:17:21,399:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:17:21,415:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:17:48,847:ERROR:create_model() for lightgbm raised an exception or returned all 0.0:
2025-08-19 18:17:48,848:ERROR:Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 794, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\model_selection\_validation.py", line 450, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\model_selection\_validation.py", line 536, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 10 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
10 fits failed with the following error:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\pipeline.py", line 278, in fit
    fitted_estimator = self._memory_fit(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\joblib\memory.py", line 353, in __call__
    return self.func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\lightgbm\sklearn.py", line 1560, in fit
    super().fit(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\lightgbm\sklearn.py", line 1049, in fit
    self._Booster = train(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\lightgbm\engine.py", line 297, in train
    booster = Booster(params=params, train_set=train_set)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\lightgbm\basic.py", line 3656, in __init__
    train_set.construct()
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\lightgbm\basic.py", line 2590, in construct
    self._lazy_init(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\lightgbm\basic.py", line 2227, in _lazy_init
    return self.set_feature_name(feature_name)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\lightgbm\basic.py", line 3046, in set_feature_name
    _safe_call(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\lightgbm\basic.py", line 313, in _safe_call
    raise LightGBMError(_LIB.LGBM_GetLastError().decode("utf-8"))
lightgbm.basic.LightGBMError: Do not support special JSON characters in feature name.


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 815, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\model_selection\_validation.py", line 450, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\model_selection\_validation.py", line 536, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 10 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
10 fits failed with the following error:
Traceback (most recent call last):
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\pipeline.py", line 278, in fit
    fitted_estimator = self._memory_fit(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\joblib\memory.py", line 353, in __call__
    return self.func(*args, **kwargs)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\lightgbm\sklearn.py", line 1560, in fit
    super().fit(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\lightgbm\sklearn.py", line 1049, in fit
    self._Booster = train(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\lightgbm\engine.py", line 297, in train
    booster = Booster(params=params, train_set=train_set)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\lightgbm\basic.py", line 3656, in __init__
    train_set.construct()
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\lightgbm\basic.py", line 2590, in construct
    self._lazy_init(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\lightgbm\basic.py", line 2227, in _lazy_init
    return self.set_feature_name(feature_name)
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\lightgbm\basic.py", line 3046, in set_feature_name
    _safe_call(
  File "c:\Users\user\anaconda3\envs\python310\lib\site-packages\lightgbm\basic.py", line 313, in _safe_call
    raise LightGBMError(_LIB.LGBM_GetLastError().decode("utf-8"))
lightgbm.basic.LightGBMError: Do not support special JSON characters in feature name.


2025-08-19 18:17:48,851:INFO:Initializing Dummy Classifier
2025-08-19 18:17:48,853:INFO:Total runtime is 9.419329782327015 minutes
2025-08-19 18:17:48,857:INFO:SubProcess create_model() called ==================================
2025-08-19 18:17:48,857:INFO:Initializing create_model()
2025-08-19 18:17:48,857:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026ABA2ABC10>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000026ABA2AA620>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 18:17:48,857:INFO:Checking exceptions
2025-08-19 18:17:48,857:INFO:Importing libraries
2025-08-19 18:17:48,857:INFO:Copying training dataset
2025-08-19 18:17:48,949:INFO:Defining folds
2025-08-19 18:17:48,949:INFO:Declaring metric variables
2025-08-19 18:17:48,965:INFO:Importing untrained model
2025-08-19 18:17:48,967:INFO:Dummy Classifier Imported successfully
2025-08-19 18:17:48,967:INFO:Starting cross validation
2025-08-19 18:17:48,984:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-19 18:17:49,190:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:17:49,212:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:17:49,234:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:17:49,279:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:17:49,322:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:17:49,407:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:17:49,435:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:17:49,457:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:17:49,461:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:17:49,475:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:18:16,201:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:18:16,557:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:18:16,676:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:18:16,735:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:18:16,842:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:18:16,846:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:18:16,956:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:18:17,005:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:18:17,065:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:18:17,069:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:18:17,787:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:18:17,789:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:18:17,789:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:18:17,791:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:18:18,155:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:18:18,157:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:18:18,157:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:18:18,159:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:18:18,445:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:18:18,447:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:18:18,447:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:18:18,449:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:18:18,449:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:18:18,449:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:18:18,451:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:18:18,451:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:18:18,589:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:18:18,591:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:18:18,593:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:18:18,593:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:18:18,607:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:18:18,609:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:18:18,609:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:18:18,611:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:18:18,649:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:18:18,649:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:18:18,649:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:18:18,649:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:18:18,663:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:18:18,665:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:18:18,665:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:18:18,665:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:18:18,731:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:18:18,733:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:18:18,733:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:18:18,733:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:18:18,749:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:18:18,749:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:18:18,749:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-19 18:18:18,749:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 3) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-19 18:18:18,781:INFO:Calculating mean and std
2025-08-19 18:18:18,781:INFO:Creating metrics dataframe
2025-08-19 18:18:18,781:INFO:Uploading results into container
2025-08-19 18:18:18,781:INFO:Uploading model into container now
2025-08-19 18:18:18,781:INFO:_master_model_container: 13
2025-08-19 18:18:18,781:INFO:_display_container: 2
2025-08-19 18:18:18,781:INFO:DummyClassifier(constant=None, random_state=1234, strategy='prior')
2025-08-19 18:18:18,781:INFO:create_model() successfully completed......................................
2025-08-19 18:18:18,832:INFO:SubProcess create_model() end ==================================
2025-08-19 18:18:18,848:INFO:Creating metrics dataframe
2025-08-19 18:18:18,850:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-08-19 18:18:18,859:INFO:Initializing create_model()
2025-08-19 18:18:18,859:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026ABA2ABC10>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=1234, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-19 18:18:18,859:INFO:Checking exceptions
2025-08-19 18:18:18,859:INFO:Importing libraries
2025-08-19 18:18:18,859:INFO:Copying training dataset
2025-08-19 18:18:18,933:INFO:Defining folds
2025-08-19 18:18:18,933:INFO:Declaring metric variables
2025-08-19 18:18:18,933:INFO:Importing untrained model
2025-08-19 18:18:18,933:INFO:Declaring custom model
2025-08-19 18:18:18,934:INFO:Random Forest Classifier Imported successfully
2025-08-19 18:18:18,947:INFO:Cross validation set to False
2025-08-19 18:18:18,947:INFO:Fitting Model
2025-08-19 18:18:18,997:WARNING:c:\Users\user\anaconda3\envs\python310\lib\site-packages\sklearn\impute\_base.py:577: UserWarning: Skipping features without any observed values: ['country_etc' 'selfemp_be_etc' 'wsector_etc']. At least one non-missing value is needed for imputation with strategy='mean'.
  warnings.warn(

2025-08-19 18:18:31,233:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=1234, verbose=0,
                       warm_start=False)
2025-08-19 18:18:31,233:INFO:create_model() successfully completed......................................
2025-08-19 18:18:31,315:INFO:_master_model_container: 13
2025-08-19 18:18:31,315:INFO:_display_container: 2
2025-08-19 18:18:31,315:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=1234, verbose=0,
                       warm_start=False)
2025-08-19 18:18:31,315:INFO:compare_models() successfully completed......................................
